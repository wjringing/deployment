import React, { useState, useRef, useEffect } from 'react';
import { useSupabaseData } from '../hooks/useSupabaseData';
import { 
  Users, 
  MapPin, 
  Clock, 
  Settings, 
  Plus, 
  Trash2, 
  Save, 
  Calendar, 
  ChefHat, 
  Store, 
  UserCheck, 
  Chrome as Broom, 
  GripVertical,
  ArrowLeft,
  Target,
  Zap
} from 'lucide-react';

const DragDropDeployment = ({ onBack, templateShifts = [], uiLoading, setUiLoading }) => {
  const {
    staff,
    positions,
    deploymentsByDate,
    shiftInfoByDate,
    targets,
    addDeployment,
    removeDeployment,
    updateDeployment,
    getPositionsByType,
    loading: supabaseLoading,
    error: supabaseError
  } = useSupabaseData();

  const workspaceRef = useRef(null);
  const [selectedDate, setSelectedDate] = useState(() => {
    const today = new Date();
    return today.toISOString().split('T')[0];
  });
  
  const [selectedShiftType, setSelectedShiftType] = useState('Day Shift');
  const [draggedItem, setDraggedItem] = useState(null);
  const [deploymentItems, setDeploymentItems] = useState([]);
  const [dragOverZone, setDragOverZone] = useState(null);
  const [touchDevice, setTouchDevice] = useState(false);

  // Detect touch device
  useEffect(() => {
    setTouchDevice('ontouchstart' in window);
  }, []);

  // Get current deployments and shift info
  const currentDeployments = deploymentsByDate[selectedDate] || [];
  const currentShiftInfo = shiftInfoByDate[selectedDate] || {};

  // Position categories with enhanced grouping
  const positionCategories = {
    kitchen: {
      name: 'Kitchen',
      icon: ChefHat,
      positions: ['Cook', 'Cook2', 'Burgers', 'Fries', 'Chick', 'Transfer'],
      color: 'bg-orange-100 border-orange-300 hover:bg-orange-200',
      dragColor: 'bg-orange-500'
    },
    frontOfHouse: {
      name: 'Front of House',
      icon: Store,
      positions: ['DT', 'DT2', 'Rst', 'Front', 'Mid', 'Lobby'],
      color: 'bg-blue-100 border-blue-300 hover:bg-blue-200',
      dragColor: 'bg-blue-500'
    },
    packing: {
      name: 'Packing',
      icon: UserCheck,
      positions: ['DT Pack', 'Rst Pack', 'Deliv Pack'],
      color: 'bg-green-100 border-green-300 hover:bg-green-200',
      dragColor: 'bg-green-500'
    },
    management: {
      name: 'Management',
      icon: Target,
      positions: ['Manager', 'Shift Leader', 'Team Leader'],
      color: 'bg-purple-100 border-purple-300 hover:bg-purple-200',
      dragColor: 'bg-purple-500'
    }
  };

  const closingPositions = ['Lobby / Toilets', 'Front', 'Staff Room / Toilet', 'Kitchen'];

  // Drag and drop handlers with enhanced feedback
  const handleDragStart = (e, item, type) => {
    const dragData = { ...item, dragType: type, timestamp: Date.now() };
    setDraggedItem(dragData);
    
    // Set drag effect and data
    e.dataTransfer.effectAllowed = 'move';
    e.dataTransfer.setData('text/plain', JSON.stringify(dragData));
    
    // Visual feedback
    e.target.style.opacity = '0.6';
    e.target.style.transform = 'scale(0.95)';
    
    // Add drag class to body for global styling
    document.body.classList.add('dragging');
  };

  const handleDragEnd = (e) => {
    // Reset visual feedback
    e.target.style.opacity = '1';
    e.target.style.transform = 'scale(1)';
    
    // Clean up
    setDraggedItem(null);
    setDragOverZone(null);
    document.body.classList.remove('dragging');
  };

  const handleDragOver = (e) => {
    e.preventDefault();
    e.dataTransfer.dropEffect = 'move';
  };

  const handleDragEnter = (e, zone) => {
    e.preventDefault();
    setDragOverZone(zone);
  };

  const handleDragLeave = (e) => {
    // Only clear if we're leaving the drop zone entirely
    if (!e.currentTarget.contains(e.relatedTarget)) {
      setDragOverZone(null);
    }
  };

  const handleDrop = (e) => {
    e.preventDefault();
    setDragOverZone(null);
    
    if (!draggedItem) return;

    const rect = e.currentTarget.getBoundingClientRect();
    const x = Math.max(10, e.clientX - rect.left - 75); // Center the item with bounds
    const y = Math.max(10, e.clientY - rect.top - 25);

    const newItem = {
      id: `deployment-${Date.now()}-${Math.random()}`,
      ...draggedItem,
      x: Math.min(x, rect.width - 160), // Ensure item stays within bounds
      y: Math.min(y, rect.height - 60),
      deployed: true,
      shiftType: selectedShiftType
    };

    setDeploymentItems(prev => [...prev, newItem]);
    
    // Provide user feedback
    showNotification(`${draggedItem.name || draggedItem.dragType} added to deployment`, 'success');
  };

  // Column drop handler
  const handleColumnDrop = (e, columnType) => {
    e.preventDefault();
    setDragOverZone(null);
    
    if (!draggedItem) return;

    const newItem = {
      id: `deployment-${Date.now()}-${Math.random()}`,
      ...draggedItem,
      dragType: columnType === 'secondary' ? 'position' : draggedItem.dragType,
      columnType: columnType,
      deployed: true,
      shiftType: selectedShiftType
    };

    setDeploymentItems(prev => [...prev, newItem]);
    
    // Provide user feedback
    showNotification(`${draggedItem.name || draggedItem.dragType} added to ${columnType}`, 'success');
  };

  // Touch support for mobile devices
  const handleTouchStart = (e, item, type) => {
    if (!touchDevice) return;
    
    const touch = e.touches[0];
    const dragData = { ...item, dragType: type, timestamp: Date.now() };
    setDraggedItem(dragData);
    
    // Visual feedback for touch
    e.target.style.opacity = '0.6';
    e.target.style.transform = 'scale(0.95)';
  };

  const handleTouchMove = (e) => {
    if (!draggedItem || !touchDevice) return;
    e.preventDefault();
    
    const touch = e.touches[0];
    const elementBelow = document.elementFromPoint(touch.clientX, touch.clientY);
    
    // Check if over drop zone
    const dropZone = elementBelow?.closest('.deployment-workspace');
    if (dropZone) {
      setDragOverZone('workspace');
    } else {
      setDragOverZone(null);
    }
  };

  const handleTouchEnd = (e) => {
    if (!draggedItem || !touchDevice) return;
    
    const touch = e.changedTouches[0];
    const elementBelow = document.elementFromPoint(touch.clientX, touch.clientY);
    const dropZone = elementBelow?.closest('.deployment-workspace');
    
    if (dropZone) {
      const rect = dropZone.getBoundingClientRect();
      const x = Math.max(10, touch.clientX - rect.left - 75);
      const y = Math.max(10, touch.clientY - rect.top - 25);

      const newItem = {
        id: `deployment-${Date.now()}-${Math.random()}`,
        ...draggedItem,
        x: Math.min(x, rect.width - 160),
        y: Math.min(y, rect.height - 60),
        deployed: true,
        shiftType: selectedShiftType
      };

      setDeploymentItems(prev => [...prev, newItem]);
      showNotification(`${draggedItem.name || draggedItem.dragType} added to deployment`, 'success');
    }
    
    // Reset
    e.target.style.opacity = '1';
    e.target.style.transform = 'scale(1)';
    setDraggedItem(null);
    setDragOverZone(null);
  };

  const handleItemMove = (id, newX, newY) => {
    setDeploymentItems(prev => 
      prev.map(item => 
        item.id === id ? { ...item, x: newX, y: newY } : item
      )
    );
  };

  const handleRemoveItem = (id) => {
    setDeploymentItems(prev => prev.filter(item => item.id !== id));
    showNotification('Item removed from deployment', 'info');
  };

  const saveDeployment = async () => {
    try {
      setUiLoading(true);
      
      // Group items by staff member to create complete deployments
      const staffDeployments = {};
      
      deploymentItems.forEach(item => {
        if (item.dragType === 'staff') {
          if (!staffDeployments[item.id]) {
            staffDeployments[item.id] = {
              staff: item,
              position: null,
              shift: null,
              closing: null,
              secondary: null
            };
          }
        }
      });
      
      // Assign positions, shifts, and other attributes to staff
      deploymentItems.forEach(item => {
        if (item.dragType === 'position') {
          // Find nearest staff member
          const nearestStaff = findNearestStaff(item);
          if (nearestStaff && staffDeployments[nearestStaff.id]) {
            if (!staffDeployments[nearestStaff.id].position) {
              staffDeployments[nearestStaff.id].position = item.name;
            } else {
              staffDeployments[nearestStaff.id].secondary = item.name;
            }
          }
        } else if (item.dragType === 'shift') {
          const nearestStaff = findNearestStaff(item);
          if (nearestStaff && staffDeployments[nearestStaff.id]) {
            staffDeployments[nearestStaff.id].shift = item;
          }
        } else if (item.dragType === 'closing') {
          const nearestStaff = findNearestStaff(item);
          if (nearestStaff && staffDeployments[nearestStaff.id]) {
            staffDeployments[nearestStaff.id].closing = item.name;
          }
        }
      });

      // Create deployments for staff with complete information
      const deploymentsToSave = Object.values(staffDeployments)
        .filter(deployment => deployment.position && deployment.shift)
        .map(deployment => ({
          date: selectedDate,
          staff_id: deployment.staff.id,
          start_time: deployment.shift.startTime,
          end_time: deployment.shift.endTime,
          position: deployment.position,
          secondary: deployment.secondary || '',
          area: '', // Could be enhanced to auto-assign based on position
          closing: deployment.closing || '',
          break_minutes: calculateBreakTime(deployment.staff, deployment.shift),
          shift_type: selectedShiftType
        }));

      // Save each deployment
      for (const deployment of deploymentsToSave) {
        await addDeployment(deployment);
      }

      // Clear workspace after saving
      setDeploymentItems([]);
      showNotification(`${deploymentsToSave.length} deployments saved successfully!`, 'success');
      
    } catch (error) {
      console.error('Error saving deployment:', error);
      showNotification('Error saving deployment: ' + error.message, 'error');
    } finally {
      setUiLoading(false);
    }
  };

  const findNearestStaff = (item) => {
    let nearestStaff = null;
    let minDistance = Infinity;
    
    deploymentItems
      .filter(i => i.dragType === 'staff')
      .forEach(staffItem => {
        const distance = Math.sqrt(
          Math.pow(item.x - staffItem.x, 2) + Math.pow(item.y - staffItem.y, 2)
        );
        if (distance < minDistance && distance < 100) { // Within 100px
          minDistance = distance;
          nearestStaff = staffItem;
        }
      });
    
    return nearestStaff;
  };

  const calculateBreakTime = (staffMember, shift) => {
    const [startHour, startMin] = shift.startTime.split(':').map(Number);
    const [endHour, endMin] = shift.endTime.split(':').map(Number);
    
    let start = startHour + startMin / 60;
    let end = endHour + endMin / 60;
    
    if (end < start) end += 24;
    const workHours = end - start;

    if (staffMember.is_under_18) {
      return workHours >= 4.5 ? 30 : 0;
    }
    
    if (workHours >= 6) return 30;
    if (workHours >= 4.5) return 15;
    return 0;
  };

  const clearWorkspace = () => {
    setDeploymentItems([]);
    showNotification('Workspace cleared', 'info');
  };

  // Notification system
  const [notifications, setNotifications] = useState([]);
  
  const showNotification = (message, type = 'info') => {
    const id = Date.now();
    const notification = { id, message, type };
    setNotifications(prev => [...prev, notification]);
    
    setTimeout(() => {
      setNotifications(prev => prev.filter(n => n.id !== id));
    }, 3000);
  };

  if (supabaseLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="w-8 h-8 border-4 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
          <p className="text-gray-600">Loading deployment system...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 p-4">
      {/* Notifications */}
      <div className="fixed top-4 right-4 z-50 space-y-2">
        {notifications.map(notification => (
          <div
            key={notification.id}
            className={`px-4 py-2 rounded-lg shadow-lg text-white transform transition-all duration-300 ${
              notification.type === 'success' ? 'bg-green-500' :
              notification.type === 'error' ? 'bg-red-500' : 'bg-blue-500'
            }`}
          >
            {notification.message}
          </div>
        ))}
      </div>

      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="bg-white rounded-lg shadow-sm p-6 mb-6">
          <div className="flex justify-between items-center mb-4">
            <div className="flex items-center gap-4">
              <button
                onClick={onBack}
                className="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-lg flex items-center gap-2"
              >
                <ArrowLeft className="w-4 h-4" />
                Back
              </button>
              <h1 className="text-3xl font-bold text-gray-800 flex items-center gap-3">
                <Zap className="w-8 h-8 text-blue-600" />
                Interactive Deployment Builder
              </h1>
            </div>
            <div className="flex gap-4">
              <button
                onClick={clearWorkspace}
                className="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-lg flex items-center gap-2"
              >
                <Trash2 className="w-4 h-4" />
                Clear
              </button>
              <button
                onClick={saveDeployment}
                disabled={uiLoading || deploymentItems.length === 0}
                className="bg-green-600 hover:bg-green-700 disabled:bg-gray-400 text-white px-4 py-2 rounded-lg flex items-center gap-2"
              >
                <Save className="w-4 h-4" />
                {uiLoading ? 'Saving...' : 'Save Deployment'}
              </button>
            </div>
          </div>

          <div className="flex gap-4 items-center">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Date</label>
              <input
                type="date"
                value={selectedDate}
                onChange={(e) => setSelectedDate(e.target.value)}
                className="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Shift Type</label>
              <select
                value={selectedShiftType}
                onChange={(e) => setSelectedShiftType(e.target.value)}
                className="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="Day Shift">Day Shift</option>
                <option value="Night Shift">Night Shift</option>
              </select>
            </div>
            <div className="ml-4 text-sm text-gray-600">
              <div>Items in workspace: {deploymentItems.length}</div>
              <div>Staff assigned: {deploymentItems.filter(i => i.dragType === 'staff').length}</div>
            </div>
          </div>
        </div>

        {/* Main Layout */}
        <div className="grid grid-cols-12 gap-4 h-[calc(100vh-250px)]">
          {/* Left Panel - Staff List */}
          <div className="col-span-2 bg-white rounded-lg shadow-sm p-4 overflow-y-auto">
            <h2 className="text-lg font-semibold mb-4 flex items-center gap-2 sticky top-0 bg-white pb-2">
              <Users className="w-5 h-5 text-blue-600" />
              Staff ({staff.length})
            </h2>
            <div className="space-y-2">
              {staff.map(member => (
                <div
                  key={member.id}
                  draggable
                  onDragStart={(e) => handleDragStart(e, member, 'staff')}
                  onDragEnd={handleDragEnd}
                  onTouchStart={(e) => handleTouchStart(e, member, 'staff')}
                  onTouchMove={handleTouchMove}
                  onTouchEnd={handleTouchEnd}
                  className="p-3 bg-blue-50 border border-blue-200 rounded-lg cursor-move hover:bg-blue-100 transition-all duration-200 transform hover:scale-105 active:scale-95 flex items-center gap-2"
                >
                  <GripVertical className="w-4 h-4 text-gray-400" />
                  <div className="flex-1">
                    <div className="font-medium text-sm">{member.name}</div>
                    {member.is_under_18 && (
                      <div className="text-xs text-orange-600 font-medium">Under 18</div>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Main Content Area */}
          <div className="col-span-8 space-y-4">
            {/* Top Panel - Positions by Category */}
            <div className="grid grid-cols-4 gap-4 h-32">
              {Object.entries(positionCategories).map(([key, category]) => {
                const Icon = category.icon;
                return (
                  <div key={key} className={`${category.color} rounded-lg p-3 border-2 border-dashed transition-colors duration-200`}>
                    <h3 className="font-semibold mb-2 flex items-center gap-2 text-sm">
                      <Icon className="w-4 h-4" />
                      {category.name}
                    </h3>
                    <div className="flex flex-wrap gap-1">
                      {category.positions.map(position => (
                        <div
                          key={position}
                          draggable
                          onDragStart={(e) => handleDragStart(e, { name: position }, 'position')}
                          onDragEnd={handleDragEnd}
                          onTouchStart={(e) => handleTouchStart(e, { name: position }, 'position')}
                          onTouchMove={handleTouchMove}
                          onTouchEnd={handleTouchEnd}
                          className="px-2 py-1 bg-white rounded text-xs cursor-move hover:bg-gray-50 border transition-all duration-200 transform hover:scale-105 active:scale-95"
                        >
                          {position}
                        </div>
                      ))}
                    </div>
                  </div>
                );
              })}
            </div>
            <div className="bg-white rounded-lg border-2 border-gray-200 p-4 flex-1 min-h-96">
              <h3 className="text-lg font-semibold mb-4 text-center">Deployment Workspace</h3>
              
              {/* Deployment Columns */}
              <div className="grid grid-cols-6 gap-4 h-full">
                {/* Staff Column */}
                <div
                  className={`deployment-column bg-blue-50 border-2 border-dashed border-blue-300 rounded-lg p-3 min-h-80 transition-all duration-300 ${
                    dragOverZone === 'staff' ? 'border-blue-500 bg-blue-100' : ''
                  }`}
                  onDragOver={handleDragOver}
                  onDragEnter={(e) => handleDragEnter(e, 'staff')}
                  onDragLeave={handleDragLeave}
                  onDrop={(e) => handleColumnDrop(e, 'staff')}
                >
                  <h4 className="font-medium text-sm mb-3 text-center flex items-center justify-center gap-1">
                    <Users className="w-4 h-4" />
                    Staff
                  </h4>
                  <div className="space-y-2">
                    {deploymentItems.filter(item => item.dragType === 'staff').map(item => (
                      <div key={item.id} className="bg-blue-500 text-white p-2 rounded text-xs text-center relative group">
                        {item.name}
                        <button
                          onClick={() => handleRemoveItem(item.id)}
                          className="absolute -top-1 -right-1 bg-red-500 text-white rounded-full w-4 h-4 text-xs opacity-0 group-hover:opacity-100 transition-opacity"
                        >
                          ×
                        </button>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Position Column */}
                <div
                  className={`deployment-column bg-orange-50 border-2 border-dashed border-orange-300 rounded-lg p-3 min-h-80 transition-all duration-300 ${
                    dragOverZone === 'position' ? 'border-orange-500 bg-orange-100' : ''
                  }`}
                  onDragOver={handleDragOver}
                  onDragEnter={(e) => handleDragEnter(e, 'position')}
                  onDragLeave={handleDragLeave}
                  onDrop={(e) => handleColumnDrop(e, 'position')}
                >
                  <h4 className="font-medium text-sm mb-3 text-center flex items-center justify-center gap-1">
                    <MapPin className="w-4 h-4" />
                    Position
                  </h4>
                  <div className="space-y-2">
                    {deploymentItems.filter(item => item.dragType === 'position').map(item => (
                      <div key={item.id} className="bg-orange-500 text-white p-2 rounded text-xs text-center relative group">
                        {item.name}
                        <button
                          onClick={() => handleRemoveItem(item.id)}
                          className="absolute -top-1 -right-1 bg-red-500 text-white rounded-full w-4 h-4 text-xs opacity-0 group-hover:opacity-100 transition-opacity"
                        >
                          ×
                        </button>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Secondary Position Column */}
                <div
                  className={`deployment-column bg-green-50 border-2 border-dashed border-green-300 rounded-lg p-3 min-h-80 transition-all duration-300 ${
                    dragOverZone === 'secondary' ? 'border-green-500 bg-green-100' : ''
                  }`}
                  onDragOver={handleDragOver}
                  onDragEnter={(e) => handleDragEnter(e, 'secondary')}
                  onDragLeave={handleDragLeave}
                  onDrop={(e) => handleColumnDrop(e, 'secondary')}
                >
                  <h4 className="font-medium text-sm mb-3 text-center flex items-center justify-center gap-1">
                    <UserCheck className="w-4 h-4" />
                    Secondary
                  </h4>
                  <div className="space-y-2">
                    {deploymentItems.filter(item => item.dragType === 'secondary').map(item => (
                      <div key={item.id} className="bg-green-500 text-white p-2 rounded text-xs text-center relative group">
                        {item.name}
                        <button
                          onClick={() => handleRemoveItem(item.id)}
                          className="absolute -top-1 -right-1 bg-red-500 text-white rounded-full w-4 h-4 text-xs opacity-0 group-hover:opacity-100 transition-opacity"
                        >
                          ×
                        </button>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Shift Time Column */}
                <div
                  className={`deployment-column bg-purple-50 border-2 border-dashed border-purple-300 rounded-lg p-3 min-h-80 transition-all duration-300 ${
                    dragOverZone === 'shift' ? 'border-purple-500 bg-purple-100' : ''
                  }`}
                  onDragOver={handleDragOver}
                  onDragEnter={(e) => handleDragEnter(e, 'shift')}
                  onDragLeave={handleDragLeave}
                  onDrop={(e) => handleColumnDrop(e, 'shift')}
                >
                  <h4 className="font-medium text-sm mb-3 text-center flex items-center justify-center gap-1">
                    <Clock className="w-4 h-4" />
                    Shift Time
                  </h4>
                  <div className="space-y-2">
                    {deploymentItems.filter(item => item.dragType === 'shift').map(item => (
                      <div key={item.id} className="bg-purple-500 text-white p-2 rounded text-xs text-center relative group">
                        <div className="font-medium">{item.name}</div>
                        <div className="text-xs opacity-75">{item.startTime}-{item.endTime}</div>
                        <button
                          onClick={() => handleRemoveItem(item.id)}
                          className="absolute -top-1 -right-1 bg-red-500 text-white rounded-full w-4 h-4 text-xs opacity-0 group-hover:opacity-100 transition-opacity"
                        >
                          ×
                        </button>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Area Column */}
                <div
                  className={`deployment-column bg-yellow-50 border-2 border-dashed border-yellow-300 rounded-lg p-3 min-h-80 transition-all duration-300 ${
                    dragOverZone === 'area' ? 'border-yellow-500 bg-yellow-100' : ''
                  }`}
                  onDragOver={handleDragOver}
                  onDragEnter={(e) => handleDragEnter(e, 'area')}
                  onDragLeave={handleDragLeave}
                  onDrop={(e) => handleColumnDrop(e, 'area')}
                >
                  <h4 className="font-medium text-sm mb-3 text-center flex items-center justify-center gap-1">
                    <Store className="w-4 h-4" />
                    Area
                  </h4>
                  <div className="space-y-2">
                    {deploymentItems.filter(item => item.dragType === 'area').map(item => (
                      <div key={item.id} className="bg-yellow-500 text-white p-2 rounded text-xs text-center relative group">
                        {item.name}
                        <button
                          onClick={() => handleRemoveItem(item.id)}
                          className="absolute -top-1 -right-1 bg-red-500 text-white rounded-full w-4 h-4 text-xs opacity-0 group-hover:opacity-100 transition-opacity"
                        >
                          ×
                        </button>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Closing Position Column */}
                <div
                  className={`deployment-column bg-red-50 border-2 border-dashed border-red-300 rounded-lg p-3 min-h-80 transition-all duration-300 ${
                    dragOverZone === 'closing' ? 'border-red-500 bg-red-100' : ''
                  }`}
                  onDragOver={handleDragOver}
                  onDragEnter={(e) => handleDragEnter(e, 'closing')}
                  onDragLeave={handleDragLeave}
                  onDrop={(e) => handleColumnDrop(e, 'closing')}
                >
                  <h4 className="font-medium text-sm mb-3 text-center flex items-center justify-center gap-1">
                    <Broom className="w-4 h-4" />
                    Closing
                  </h4>
                  <div className="space-y-2">
                    {deploymentItems.filter(item => item.dragType === 'closing').map(item => (
                      <div key={item.id} className="bg-red-500 text-white p-2 rounded text-xs text-center relative group">
                        {item.name}
                        <button
                          onClick={() => handleRemoveItem(item.id)}
                          className="absolute -top-1 -right-1 bg-red-500 text-white rounded-full w-4 h-4 text-xs opacity-0 group-hover:opacity-100 transition-opacity"
                        >
                          ×
                        </button>
                      </div>
                    ))}
                  </div>
                </div>
              </div>

              {/* Empty State */}
              {deploymentItems.length === 0 && (
                <div className="absolute inset-0 flex items-center justify-center text-gray-500 pointer-events-none">
                  <div className="text-center">
                    <Calendar className="w-16 h-16 mx-auto mb-4 opacity-50" />
                    <p className="text-xl font-medium mb-2">Interactive Deployment Workspace</p>
                    <p className="text-sm mb-4">Drag and drop items into the columns above</p>
                    <div className="text-xs space-y-1">
                      <p>• Drag staff members into the Staff column</p>
                      <p>• Drag positions into Position/Secondary columns</p>
                      <p>• Drag template shifts into the Shift Time column</p>
                      <p>• Drag areas and closing positions into respective columns</p>
                    </div>
                  </div>
                </div>
              )}
            </div>

            {/* Bottom Panel - Closing Positions */}
            <div className="bg-purple-50 border-2 border-dashed border-purple-300 rounded-lg p-4 h-24 hover:bg-purple-100 transition-colors duration-200">
              <h3 className="font-semibold mb-2 flex items-center gap-2">
                <Broom className="w-4 h-4 text-purple-600" />
                Closing Positions (Night Shift Only)
              </h3>
              <div className="flex flex-wrap gap-2">
                {closingPositions.map(position => (
                  <div
                    key={position}
                    draggable
                    onDragStart={(e) => handleDragStart(e, { name: position }, 'closing')}
                    onDragEnd={handleDragEnd}
                    onTouchStart={(e) => handleTouchStart(e, { name: position }, 'closing')}
                    onTouchMove={handleTouchMove}
                    onTouchEnd={handleTouchEnd}
                    className="px-2 py-1 bg-white rounded text-xs cursor-move hover:bg-gray-50 border transition-all duration-200 transform hover:scale-105 active:scale-95"
                  >
                    {position}
                  </div>
                ))}
              </div>
            </div>
          </div>

          {/* Right Panel - Template Shifts */}
          <div className="col-span-2 bg-white rounded-lg shadow-sm p-4 overflow-y-auto">
            <h2 className="text-lg font-semibold mb-4 flex items-center gap-2 sticky top-0 bg-white pb-2">
              <Clock className="w-5 h-5 text-green-600" />
              Template Shifts
            </h2>
            <div className="space-y-2">
              {templateShifts
                .filter(template => template.type === selectedShiftType)
                .map(template => (
                  <div
                    key={template.id}
                    draggable
                    onDragStart={(e) => handleDragStart(e, template, 'shift')}
                    onDragEnd={handleDragEnd}
                    onTouchStart={(e) => handleTouchStart(e, template, 'shift')}
                    onTouchMove={handleTouchMove}
                    onTouchEnd={handleTouchEnd}
                    className="p-3 bg-green-50 border border-green-200 rounded-lg cursor-move hover:bg-green-100 transition-all duration-200 transform hover:scale-105 active:scale-95"
                  >
                    <div className="font-medium text-sm">{template.name}</div>
                    <div className="text-xs text-gray-600">
                      {template.startTime} - {template.endTime}
                    </div>
                    <div className="text-xs text-green-700 font-medium mt-1">
                      {template.type}
                    </div>
                  </div>
                ))}
              
              {templateShifts.filter(t => t.type === selectedShiftType).length === 0 && (
                <div className="text-center text-gray-500 text-sm py-8">
                  <Clock className="w-8 h-8 mx-auto mb-2 opacity-50" />
                  <p>No template shifts for {selectedShiftType}</p>
                  <p className="text-xs mt-1">Add templates in Settings</p>
                </div>
              )}
            </div>
          </div>
        </div>

        {/* Current Deployments Summary */}
        {currentDeployments.length > 0 && (
          <div className="mt-6 bg-white rounded-lg shadow-sm p-6">
            <h2 className="text-lg font-semibold mb-4">Existing Deployments for {selectedDate}</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {currentDeployments
                .filter(d => d.shift_type === selectedShiftType)
                .map(deployment => (
                  <div key={deployment.id} className="bg-gray-50 border border-gray-200 rounded-lg p-3">
                    <div className="font-medium">{deployment.staff?.name}</div>
                    <div className="text-sm text-gray-600">
                      {deployment.start_time} - {deployment.end_time}
                    </div>
                    <div className="text-sm text-gray-600">
                      Position: {deployment.position}
                    </div>
                  </div>
                ))}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default DragDropDeployment;